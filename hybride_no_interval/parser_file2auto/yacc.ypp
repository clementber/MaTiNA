%{
  #include <iostream>
  #include <string>
  #include <map>
  #include <tuple>
  #include "../hybride_automata/grammar.hpp"
  #include "yacc.tab.hpp"
  using namespace automate;

  yy::parser::symbol_type yylex (yy::parser::semantic_type *arg);


  int variable_to_int(string variable_name, autom_driver& driver);
%}
%skeleton "lalr1.cc"
%require "3.0.4"

%defines
%define parser_class_name {parser}
%define api.token.constructor
%define api.value.type variant
%define parse.trace
%define parse.error verbose

%parse-param {automate::Automate* generate_automate}

%code requires
{
  class autom_driver;
}
// The parsing context.
%param { autom_driver& driver }
%locations
%initial-action
{
  // Initialize the initial location.
  @$.begin.filename = @$.end.filename = &driver.file;
};
%code
{
# include "parsingDriver.hpp"
}

%token END 0 "end of file"
%token <std::string> NAME
%token <double> NUMBER

%type <automate::Automate*> autom
%type <std::vector<std::string>> names list_name
%type <std::unordered_set<std::string>>clocks
%type <std::tuple<std::vector<int>,std::vector<int>,std::unordered_set<std::string>>> actions
%type <std::vector<int>> allocs frees
%type <std::map<string, automate::Interval>> conditions
%type <std::pair<string, automate::Interval>> condition
%type <std::pair<double,bool>> borne_inf borne_sup

%token COMMA LACOLADE RACOLADE EGALE LCROCHET RCROCHET LBALISE
%token START_NODE END_NODE NLINE DOUBLE_SLASH NONE DOLLAR FREE ALLOC RESET

%%
autom :
   nodes NLINE DOUBLE_SLASH NLINE arretes {
     generate_automate->ressources = driver.variable_cpt;
     generate_automate->clocks.push_back(Clock(""));
     $$ = generate_automate;
   }
  |nodes NLINE DOUBLE_SLASH NLINE arretes NLINE {
    generate_automate->ressources = driver.variable_cpt;
    generate_automate->clocks.push_back(Clock(""));
    $$ = generate_automate;
  }

nodes :
   nodes NLINE node { /*Nothing to do.*/ }
  |node { /*Nothing to do.*/ }

node :
   NAME START_NODE conditions{
     if (generate_automate->start!=nullptr){
       yy::parser::error (@$,"A start state was already choosen.");
     }
     State new_state($1,$3);
     generate_automate->states.push_back(new_state);
     std::list<State>::iterator ite = generate_automate->states.end();
     ite--;
     generate_automate->start = &(*ite);
   }
  |NAME END_NODE conditions{
    State new_state($1,$3);
    generate_automate->states.push_back(new_state);
    std::list<State>::iterator ite = generate_automate->states.end();
    ite--;
    generate_automate->endStates.push_back(&(*ite));
  }
  |NAME conditions{
    State new_state($1,$2);
    generate_automate->states.push_back(new_state);
  }
  |NAME START_NODE END_NODE conditions{
    if (generate_automate->start!=nullptr){
      yy::parser::error (@$,"A start state was already choosen.");
    }
    State new_state($1,$4);
    generate_automate->states.push_back(new_state);
    std::list<State>::iterator ite = generate_automate->states.end();
    ite--;
    generate_automate->start = &(*ite);
    generate_automate->endStates.push_back(&(*ite));
  }
  |NAME END_NODE START_NODE conditions{
    if (generate_automate->start!=nullptr){
      yy::parser::error (@$,"A start state was already choosen.");
    }
    State new_state($1,$4);
    generate_automate->states.push_back(new_state);
    std::list<State>::iterator ite = generate_automate->states.end();
    ite--;
    generate_automate->start = &(*ite);
    generate_automate->endStates.push_back(&(*ite));
  }

arretes :
   arretes NLINE arrete { /*Nothing to do.*/ }
  |arrete { /*Nothing to do.*/ }

arrete :
  /*Ori*//*Dest*//*Event*/
   names  names NAME actions conditions{
     //Create the new transition for each pairs (origine, destination)
     for(string ori : $1){
       State* origine_state = generate_automate->getState(ori);
       if(origine_state == nullptr){
         yy::parser::error (@$, "state undeclared : "+ori);
       }
       for(string dest : $2){
         State* destination_state = generate_automate->getState(dest);
         if(destination_state == nullptr){
           yy::parser::error (@$, "state undeclared : "+dest);
         }
         Transition* new_trans = new Constant_Transition(origine_state, destination_state, get<0>($4), get<1>($4), $5, get<2>($4), $3);
         new_trans->clocks_to_reset.insert("");
         generate_automate->constants.insert($3);
         generate_automate->transitions[origine_state].push_back(new_trans);
       }
     }
   }
   /*Ori*//*Dest*//*Event*/
   |names  names  DOLLAR  NAME actions conditions{
      //Create the new transition for each pairs (origine, destination)
      for(string ori : $1){
        State* origine_state = generate_automate->getState(ori);
        if(origine_state == nullptr){
          yy::parser::error (@$, "state undeclared : "+ori);
        }
        for(string dest : $2){
          State* destination_state = generate_automate->getState(dest);
          if(destination_state == nullptr){
            yy::parser::error (@$, "state undeclared : "+dest);
          }
          int variable = variable_to_int($4,driver);
          Transition* new_trans = new Event_Transition(origine_state, destination_state, get<0>($5), get<1>($5), $6, get<2>($5), variable);
          new_trans->clocks_to_reset.insert("");
          generate_automate->transitions[origine_state].push_back(new_trans);
        }
      }
    }
   /*Ori*//*Dest*//*Event*/
   |names  names  NONE actions conditions{
      if(!get<2>($4).empty()){
        bool equality = false;
        for(pair<string,Interval> condition : $5){
          Interval interv = condition.second;
          if(interv.borne_inf == interv.borne_sup
             && interv.include_inf == interv.include_sup){
            equality = true;
            break;
          }
        }
        if(!equality){
          $5[""] = Interval(0);
        }
      }
      //Create the new transition for each pairs of origine, destination
      for(string ori : $1){
        State* origine_state = generate_automate->getState(ori);
        if(origine_state == nullptr){
          yy::parser::error (@$, "state undeclared : "+ori);
        }
        for(string dest : $2){
          State* destination_state = generate_automate->getState(dest);
          if(destination_state == nullptr){
            yy::parser::error (@$, "state undeclared : "+dest);
          }

          Transition* new_trans = new Epsilon_Transition(origine_state, destination_state, get<0>($4), get<1>($4), $5, get<2>($4));
          generate_automate->transitions[origine_state].push_back(new_trans);
        }
      }
    }

names :
   LACOLADE list_name RACOLADE {$$ = $2;}
  |NAME { $$ = {$1};}

list_name :
   list_name COMMA NAME { $1.push_back($3); $$ = $1;}
  | NAME { $$ = { $1 };}

actions :
   %empty {$$= make_tuple(vector<int>(),vector<int>(),unordered_set<string>());}
  |allocs {$$= make_tuple($1,vector<int>(),unordered_set<string>());}
  |frees {$$= make_tuple(vector<int>(),$1,unordered_set<string>());}
  |RESET clocks {$$= make_tuple(vector<int>(),vector<int>(),$2);}
  |frees allocs {$$= make_tuple($2,$1,unordered_set<string>());}
  |allocs frees {$$= make_tuple($1,$2,unordered_set<string>());}
  |RESET clocks allocs {$$= make_tuple($3,vector<int>(),$2);}
  |allocs RESET clocks {$$= make_tuple($1,vector<int>(),$3);}
  |RESET clocks frees {$$= make_tuple(vector<int>(),$3,$2);}
  |frees RESET clocks{$$= make_tuple(vector<int>(),$1,$3);}
  |RESET clocks frees allocs {$$= make_tuple($4,$3,$2);}
  |frees RESET clocks allocs {$$= make_tuple($4,$1,$3);}
  |frees allocs RESET clocks{$$= make_tuple($2,$1,$4);}
  |RESET clocks allocs frees {$$= make_tuple($3,$4,$2);}
  |allocs RESET clocks frees {$$= make_tuple($1,$4,$3);}
  |allocs frees RESET clocks{$$= make_tuple($1,$2,$4);}

allocs :
  ALLOC names {
    for(string const& name : $2){
      $$.push_back(variable_to_int(name,driver));
    }
  }

frees :
  FREE names {
    for(string const& name : $2){
      $$.push_back(variable_to_int(name,driver));
    }
  }

clocks :
   names {
     for(std::string clock_name : $1){
       generate_automate->find_or_create_clock(clock_name);
     }
     $$ = unordered_set<string>();
     $$.insert($1.begin(), $1.end());
   }
  | %empty { $$ = {}; }

conditions :
   conditions condition {
    if($2.second.borne_inf != -1){
        $1.insert($2);
    }
    $$ = $1;
  }
  | %empty {
    std::map<string, Interval> res;
    $$ = res;
  }

condition :
   LCROCHET borne_inf NAME borne_sup RCROCHET {
     Interval interval($2.first,$2.second,$4.first,$4.second);
     generate_automate->find_or_create_clock($3);
     std::pair<string,Interval> res($3, interval);
     $$= res;
   }
  |LCROCHET NAME borne_sup RCROCHET {
    Interval interval(0,true,$3.first,$3.second);
    generate_automate->find_or_create_clock($2);
    std::pair<string,Interval> res($2, interval);
    $$= res;
  }
  |LCROCHET NAME EGALE NUMBER RCROCHET {
    Interval interval($4,$4);
    generate_automate->find_or_create_clock($2);
    std::pair<string,Interval> res($2, interval);
    $$= res;
   }

borne_inf :
   NUMBER LBALISE {
     std::pair<double,bool> inf($1,false);
     $$= inf;
   }
  |NUMBER LBALISE EGALE {
    std::pair<double,bool> inf($1,true);
    $$= inf;
  }

borne_sup :
  LBALISE NUMBER {
    std::pair<double,bool> sup($2,false);
    $$= sup;
  }
  |LBALISE EGALE NUMBER {
   std::pair<double,bool> sup($3,true);
   $$= sup;
  }
  |%empty{
   std::pair<double,bool> sup(std::numeric_limits<double>::max(),true);
   $$= sup;
  }

%%
void yy::parser::error (const yy::location& l,
                          const std::string& m)
{
  driver.error (l, m);
}

int variable_to_int(string variable_name, autom_driver& driver){
  int variable = -1;
  try{
    variable = driver.map_variable.at(variable_name);
  }catch(const std::out_of_range& oor){
    variable = driver.variable_cpt;
    driver.map_variable[variable_name]=driver.variable_cpt++;
  }
  return variable;
}

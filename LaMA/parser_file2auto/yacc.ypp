%{
  #include <iostream>
  #include <string>
  #include <map>
  #include <tuple>
  #include "../lama_automata/grammar.hpp"
  #include "yacc.tab.hpp"
  using namespace automate;

  yy::parser::symbol_type yylex (yy::parser::semantic_type *arg);

  //int variable_to_int(string variable_name, autom_driver& driver);
%}
%skeleton "lalr1.cc"
%require "3.0.4"

%defines
%define parser_class_name {parser}
%define api.token.constructor
%define api.value.type variant
%define parse.trace
%define parse.error verbose

%parse-param {automate::Automate* generate_automate}

%code requires
{
  class autom_driver;
}
// The parsing context.
%param { autom_driver& driver }
%locations
%initial-action
{
  // Initialize the initial location.
  @$.begin.filename = @$.end.filename = &driver.file;
};
%code
{
# include "parsingDriver.hpp"
}

%token END 0 "end of file"
%token <std::string> NAME
%token <int> NUMBER

%type <automate::Automate*> autom
%type <std::vector<std::string>> names list_name
%type <std::pair<int,int>> var
%type <std::vector<automate::Variable>> vars allocs frees
%type <std::vector<std::vector<std::string>>> layer
%type <std::vector<std::vector<std::vector<std::string>>>> init_alloc
%type <std::pair<std::vector<automate::Variable>,std::vector<automate::Variable>>> actions

%token LACOLADE RACOLADE
%token START_NODE END_NODE NLINE DOUBLE_SLASH NONE ALL FREE ALLOC

%%
autom :
  init_alloc NLINE DOUBLE_SLASH nodes NLINE DOUBLE_SLASH NLINE arretes {
    generate_automate->initial_valuation = Valuation($1);
    $$ = generate_automate; 
  }
  |init_alloc NLINE DOUBLE_SLASH nodes NLINE DOUBLE_SLASH NLINE arretes NLINE {
    generate_automate->initial_valuation = Valuation($1);
    $$ = generate_automate;
  }
  |nodes NLINE DOUBLE_SLASH NLINE arretes NLINE {
    $$ = generate_automate;
  }

init_alloc :
  layer NLINE init_alloc {
    $3.push_back($1); 
    $$ = $3;
  }
  | %empty {$$ = {};}

layer : names { $$ = {$1};}
      | names layer {$2.push_back($1); $$ = $2;}

nodes :
   nodes NLINE node { /*Nothing to do.*/ }
  |node { /*Nothing to do.*/ }

node :
   NAME START_NODE{
     if (generate_automate->start!=nullptr){
       yy::parser::error (@$,"A start state was already choosen.");
     }
     State new_state($1);
     generate_automate->states.push_back(new_state);
     std::list<State>::iterator ite = generate_automate->states.end();
     ite--;
     generate_automate->start = &(*ite);
     generate_automate->transitions.insert(std::pair<State*, vector<Transition*>>(generate_automate->start, {}));
   }
  |NAME END_NODE{
    State new_state($1);
    generate_automate->states.push_back(new_state);
    std::list<State>::iterator ite = generate_automate->states.end();
    ite--;
    generate_automate->endStates.push_back(&(*ite));
    generate_automate->transitions.insert(std::pair<State*, vector<Transition*>>(&(*ite), {}));
  }
  |NAME{
    State new_state($1);
    generate_automate->states.push_back(new_state);
    std::list<State>::iterator ite = generate_automate->states.end();
    ite--;
    generate_automate->transitions.insert(std::pair<State*, vector<Transition*>>(&(*ite), {}));
  }
  |NAME START_NODE END_NODE {
    if (generate_automate->start!=nullptr){
      yy::parser::error (@$,"A start state was already choosen.");
    }
    State new_state($1);
    generate_automate->states.push_back(new_state);
    std::list<State>::iterator ite = generate_automate->states.end();
    ite--;
    generate_automate->start = &(*ite);
    generate_automate->endStates.push_back(&(*ite));
    generate_automate->transitions.insert(std::pair<State*, vector<Transition*>>(generate_automate->start, {}));
  }
  |NAME END_NODE START_NODE {
    if (generate_automate->start!=nullptr){
      yy::parser::error (@$,"A start state was already choosen.");
    }
    State new_state($1);
    generate_automate->states.push_back(new_state);
    std::list<State>::iterator ite = generate_automate->states.end();
    ite--;
    generate_automate->start = &(*ite);
    generate_automate->endStates.push_back(&(*ite));
    generate_automate->transitions.insert(std::pair<State*, vector<Transition*>>(generate_automate->start, {}));
  }

arretes :
   arretes NLINE arrete { /*Nothing to do.*/ }
  |arrete { /*Nothing to do.*/ }

arrete :
  /*Ori*//*Dest*//*Event*/ /*Alloc-free*/
   names  names   vars      actions {
     //Create the new transition for each pairs (origine, destination)
     for(string ori : $1){
       State* origine_state = generate_automate->getState(ori);
       if(origine_state == nullptr){
         yy::parser::error (@$, "state undeclared : "+ori);
       }
       for(string dest : $2){
         State* destination_state = generate_automate->getState(dest);
         if(destination_state == nullptr){
           yy::parser::error (@$, "state undeclared : "+dest);
         }
         Transition* new_trans = new Event_Transition(origine_state, destination_state,$4.first, $4.second, $3);
         generate_automate->transitions[origine_state].push_back(new_trans);
       }
     }
   }
   /*Ori*//*Dest*//*Event*/
   |names  names  NONE actions{
      //Create the new transition for each pairs of origine, destination
      for(string ori : $1){
        State* origine_state = generate_automate->getState(ori);
        if(origine_state == nullptr){
          yy::parser::error (@$, "state undeclared : "+ori);
        }
        for(string dest : $2){
          State* destination_state = generate_automate->getState(dest);
          if(destination_state == nullptr){
            yy::parser::error (@$, "state undeclared : "+dest);
          }
          Transition* new_trans = new Epsilon_Transition(origine_state, destination_state, $4.first, $4.second);
          generate_automate->transitions[origine_state].push_back(new_trans);
        }
      }
    }
    
    /*Ori*//*Dest*//*Event*/
   |names  names  ALL actions{
      //Create the new transition for each pairs of origine, destination
      for(string ori : $1){
        State* origine_state = generate_automate->getState(ori);
        if(origine_state == nullptr){
          yy::parser::error (@$, "state undeclared : "+ori);
        }
        for(string dest : $2){
          State* destination_state = generate_automate->getState(dest);
          if(destination_state == nullptr){
            yy::parser::error (@$, "state undeclared : "+dest);
          }
          Transition* new_trans = new Universal_Transition(origine_state, destination_state, $4.first, $4.second);
          generate_automate->transitions[origine_state].push_back(new_trans);
        }
      }
    }
     /*Ori*//*Dest*//*Event*/
   |names  names  NAME actions{
      //Create the new transition for each pairs of origine, destination
      for(string ori : $1){
        State* origine_state = generate_automate->getState(ori);
        if(origine_state == nullptr){
          yy::parser::error (@$, "state undeclared : "+ori);
        }
        for(string dest : $2){
          State* destination_state = generate_automate->getState(dest);
          if(destination_state == nullptr){
            yy::parser::error (@$, "state undeclared : "+dest);
          }
          Transition* new_trans = new Constant_Transition(origine_state, destination_state, $4.first, $4.second, $3);
          generate_automate->transitions[origine_state].push_back(new_trans);
        }
      }
    }

names :
    LACOLADE list_name RACOLADE {$$ = $2;}
  | LACOLADE RACOLADE { $$ = vector<std::string>();} //TODO Problème il est possible de mettre des listes vides de noeuds pour les entrées et sorties des arrêtes.
  | NAME {$$ = {$1};}

list_name :
   list_name ',' NAME { $1.push_back($3); $$ = $1;}
  | NAME { $$ = { $1 };}
  
vars :
   vars ',' var { $1.push_back(Variable($3.first,$3.second)); $$ = $1;}
  | var { $$ = vector<Variable>(); $$.push_back(Variable($1.first,$1.second));}

var : '(' NUMBER ',' NUMBER ')' { $$ = pair<int,int>($2,$4); }

actions :
   %empty {$$= pair<vector<Variable>,vector<Variable>>({},{});}
  |allocs {$$= pair<vector<Variable>,vector<Variable>>($1,{});}
  |frees {$$= pair<vector<Variable>,vector<Variable>>({},$1);}
  |frees allocs {$$= pair<vector<Variable>,vector<Variable>>($2,$1);}
  |allocs frees {$$= pair<vector<Variable>,vector<Variable>>($1,$2);}

allocs :
  ALLOC vars {
    $$=$2;
  }

frees :
  FREE vars {
    $$=$2;
  }

%%
void yy::parser::error (const yy::location& l,
                          const std::string& m)
{
  driver.error (l, m);
}

/*int variable_to_int(string variable_name, autom_driver& driver){
  int variable = -1;
  try{
    variable = driver.map_variable.at(variable_name);
  }catch(const std::out_of_range& oor){
    variable = driver.variable_cpt;
    driver.map_variable[variable_name]=driver.variable_cpt++;
  }
  return variable;
}*/

%{
  #include <iostream>
  #include <string>
  #include "../time_automata/grammar.hpp"
  #include "yacc.tab.hpp"
  using namespace automate;

  yy::parser::symbol_type yylex (yy::parser::semantic_type *arg);

%}
%skeleton "lalr1.cc"
%require "3.0.4"

%defines
%define parser_class_name {parser}
%define api.token.constructor
%define api.value.type variant
%define parse.trace
%define parse.error verbose

%parse-param {automate::Automate* generate_automate}

%code requires
{
  class autom_driver;
}
// The parsing context.
%param { autom_driver& driver }
%locations
%initial-action
{
  // Initialize the initial location.
  @$.begin.filename = @$.end.filename = &driver.file;
};
%code
{
# include "parsingDriver.hpp"
}

%token END 0 "end of file"
%token <double> NUMBER
%token <std::string> NAME

%type <automate::Automate*> autom
%type <std::vector<std::string>> names list_name clocks
%type <std::map<string, automate::Interval>> conditions
%type <std::pair<string, automate::Interval>> condition
%type <std::pair<double,bool>> borne_inf borne_sup

%token LBALISE COMMA LCROCHET RCROCHET LACOLADE RACOLADE EGALE
%token START_NODE END_NODE NLINE DOUBLE_SLASH NONE

%%
autom :
   nodes NLINE DOUBLE_SLASH NLINE arretes { $$ = generate_automate; }
  |nodes NLINE DOUBLE_SLASH NLINE arretes NLINE { $$ = generate_automate; }

nodes :
   nodes NLINE node { /*Nothing to do.*/ }
  |node { /*Nothing to do.*/ }

node :
   NAME START_NODE conditions {
     if (generate_automate->start!=nullptr){
       yy::parser::error (@$,"A start state was already choosen.");
     }
     State new_state($1, $3);
     generate_automate->states.push_back(new_state);
     std::list<State>::iterator ite = generate_automate->states.end();
     ite--;
     generate_automate->start = &(*ite);
     generate_automate->transitions.insert(std::pair<State*, vector<Transition>>(generate_automate->start, {}));
   }
  |NAME END_NODE conditions {
    State new_state($1, $3);
    generate_automate->states.push_back(new_state);
    std::list<State>::iterator ite = generate_automate->states.end();
    ite--;
    generate_automate->endStates.push_back(&(*ite));
    generate_automate->transitions.insert(std::pair<State*, vector<Transition>>(&(*ite), {}));
  }
  |NAME conditions {
    State new_state($1, $2);
    generate_automate->states.push_back(new_state);
    std::list<State>::iterator ite = generate_automate->states.end();
    ite--;
    generate_automate->transitions.insert(std::pair<State*, vector<Transition>>(&(*ite), {}));
  }
  |NAME START_NODE END_NODE conditions {
    if (generate_automate->start!=nullptr){
      yy::parser::error (@$,"A start state was already choosen.");
    }
    State new_state($1, $4);
    generate_automate->states.push_back(new_state);
    std::list<State>::iterator ite = generate_automate->states.end();
    ite--;
    generate_automate->start = &(*ite);
    generate_automate->endStates.push_back(&(*ite));
    generate_automate->transitions.insert(std::pair<State*, vector<Transition>>(generate_automate->start, {}));
  }
  |NAME END_NODE START_NODE conditions {
    if (generate_automate->start!=nullptr){
      yy::parser::error (@$,"A start state was already choosen.");
    }
    State new_state($1, $4);
    generate_automate->states.push_back(new_state);
    std::list<State>::iterator ite = generate_automate->states.end();
    ite--;
    generate_automate->start = &(*ite);
    generate_automate->endStates.push_back(&(*ite));
    generate_automate->transitions.insert(std::pair<State*, vector<Transition>>(generate_automate->start, {}));
  }

arretes :
   arretes NLINE arrete { /*Nothing to do.*/ }
  |arrete { /*Nothing to do.*/ }

arrete :
  /*Ori*//*Dest*//*Events*//*Reset*/
   names  names    names    clocks  conditions {
     //Create the new transition for each pairs of origine, destination
     for(string ori : $1){
       State* origine_state = generate_automate->getState(ori);
       if(origine_state == nullptr){
         yy::parser::error (@$, "state undeclared : "+ori);
       }
       for(string dest : $2){
         State* destination_state = generate_automate->getState(dest);
         if(destination_state == nullptr){
           yy::parser::error (@$, "state undeclared : "+dest);
         }
         Transition new_trans(origine_state, destination_state, $3, $5, $4);
         generate_automate->transitions[origine_state].push_back(new_trans);
       }
     }
     //Add new character to the automate alphabet.
     for(std::string const new_event : $3){
       generate_automate->alphabet.insert(new_event);
     }
   }
   /*Ori*//*Dest*//*Events*//*Reset*/
   |names  names    NONE    clocks  conditions {
      //Create the new transition for each pairs of origine, destination
      for(string ori : $1){
        State* origine_state = generate_automate->getState(ori);
        if(origine_state == nullptr){
          yy::parser::error (@$, "state undeclared : "+ori);
        }
        for(string dest : $2){
          State* destination_state = generate_automate->getState(dest);
          if(destination_state == nullptr){
            yy::parser::error (@$, "state undeclared : "+dest);
          }
          Transition new_trans(origine_state, destination_state, {}, $5, $4);
          generate_automate->transitions[origine_state].push_back(new_trans);
        }
      }
    }
clocks :
   names {
     for(std::string clock_name : $1){
       generate_automate->find_or_create_clock(clock_name);
     }
     $$ = $1;
   }
  | %empty { $$ = {}; }

names :
   LACOLADE list_name RACOLADE {$$ = $2;}
  |NAME { $$ = {$1};}

list_name :
   list_name COMMA NAME { $1.push_back($3); $$ = $1;}
  | NAME { $$ = { $1 };}

conditions :
   conditions condition {
    if($2.second.borne_inf != -1){
        $1.insert($2);
    }
    $$ = $1;
  }
  | %empty {
    std::map<string, Interval> res;
    $$ = res;
  }

condition :
   LCROCHET borne_inf NAME borne_sup RCROCHET {
     Interval interval($2.first,$2.second,$4.first,$4.second);
     generate_automate->find_or_create_clock($3);
     std::pair<string,Interval> res($3, interval);
     $$= res;
   }
  |LCROCHET NAME borne_sup RCROCHET {
    Interval interval(0,true,$3.first,$3.second);
    generate_automate->find_or_create_clock($2);
    std::pair<string,Interval> res($2, interval);
    $$= res;
  }
  |LCROCHET NAME EGALE NUMBER RCROCHET {
    Interval interval($4,$4);
    generate_automate->find_or_create_clock($2);
    std::pair<string,Interval> res($2, interval);
    $$= res;
   }

borne_inf :
   NUMBER LBALISE {
     std::pair<double,bool> inf($1,false);
     $$= inf;
   }
  |NUMBER LBALISE EGALE {
    std::pair<double,bool> inf($1,true);
    $$= inf;
  }

borne_sup :
  LBALISE NUMBER {
    std::pair<double,bool> sup($2,false);
    $$= sup;
  }
  |LBALISE EGALE NUMBER {
   std::pair<double,bool> sup($3,true);
   $$= sup;
  }
  |%empty{
   std::pair<double,bool> sup(std::numeric_limits<double>::max(),true);
   $$= sup;
  }


%%
void yy::parser::error (const yy::location& l,
                          const std::string& m)
{
  driver.error (l, m);
}

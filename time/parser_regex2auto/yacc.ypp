%{
  #include <iostream>
  #include <string>
  #include "ast.hpp"
  #include "yacc.tab.hpp"
  using namespace tre_ast;
  using namespace std;

  yy::parser::symbol_type yylex (yy::parser::semantic_type *arg);
//  static yy::parser::symbol_type yylex(yy::parser::semantic_type *arg);
%}
%skeleton "lalr1.cc"
%require "3.0.4"

%defines
%define parser_class_name {parser}
%define api.token.constructor
%define api.value.type variant
%define parse.trace
%define parse.error verbose

%parse-param {tre_ast::AST_node** generate_ast}

%code requires
{
  class regex_driver;
}
// The parsing context.
%param { regex_driver& driver }

%locations
%initial-action
{
  // Initialize the initial location.
  @$.begin.filename = @$.end.filename = &driver.file;
};
%code
{
# include "parsingDriver.hpp"
}

%token END 0 "end of file"
%token <double> NUMBER
%token <std::string> EVENT
%type <tre_ast::AST_node*> regexp

%token LBALISE RBALISE COMMA LPARENTHESE RPARENTHESE LCROCHET RCROCHET

%left AND
%left SHUFFLE
%left OR
%left DOT
%precedence PLUS STAR QUESTION
%%
rule :
   regexp  {
     *generate_ast = $1;
   }

regexp :
   regexp OR regexp {
     $$ = new AST_OR($1,$3);
   }
  |regexp DOT regexp {
    $$= new AST_CONCAT($1,$3);
  }
  |regexp AND regexp {
    $$= new AST_CONCAT($1,$3);
  }
  |EVENT {
    $$ = new AST_EVENT($1);
  }
  |LBALISE regexp RBALISE LCROCHET NUMBER RCROCHET {
    $$ = new AST_DELAY($2, Bound(-1*$5), Bound($5));
  }
  |LBALISE regexp RBALISE LCROCHET NUMBER COMMA NUMBER RCROCHET {
    $$ = new AST_DELAY($2, Bound(-1*$5), Bound($7));
  }
  |regexp PLUS {
    $$ = new AST_PLUS($1);
  }
  |regexp QUESTION {
    $$ = new AST_OPTIONAL($1);
   }
  |regexp STAR {
    $$ = new AST_KSTAR($1);
  }
  |LPARENTHESE regexp RPARENTHESE { $$=$2; }
  |regexp SHUFFLE regexp {
    $$= new AST_SHUFFLE($1,$3);
  }


%%
void
yy::parser::error (const yy::location& l,
                          const std::string& m)
{
  driver.error (l, m);
}

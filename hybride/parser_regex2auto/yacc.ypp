%{
  #include <iostream>
  #include <string>
  #include "ast.hpp"
  #include "yacc.tab.hpp"
  using namespace tnure_ast;
  using namespace std;

  yy::parser::symbol_type yylex (yy::parser::semantic_type *arg);
//  static yy::parser::symbol_type yylex(yy::parser::semantic_type *arg);
%}
%skeleton "lalr1.cc"
%require "3.0.4"

%defines
%define parser_class_name {parser}
%define api.token.constructor
%define api.value.type variant
%define parse.trace
%define parse.error verbose


%code requires
{
  class regex_driver;
}
// The parsing context.
%parse-param {tnure_ast::AST_node** generate_ast}
%parse-param {std::map<std::string,int> const& variables_id}
%param { regex_driver& driver }

%locations
%initial-action
{
  // Initialize the initial location.
  @$.begin.filename = @$.end.filename = &driver.file;
};
%code
{
# include "parsingDriver.hpp"
}

%token END 0 "end of file"
%token <double> NUMBER
%token <std::string> CONST
%type <tnure_ast::AST_node*> regexp
%type <tnure_ast::AST_terminals*> terminals
%type <std::unordered_set<std::string>> vars

%token LBALISE RBALISE COMMA LPARENTHESE RPARENTHESE LCROCHET RCROCHET ALPHA

%left AND
%left SHUFFLE
%left OR
%left RACCOLADE
%right LACCOLADE
%left DOT LINK
%precedence PLUS STAR QUESTION FREE FRESH
%%
rule :
   regexp  {
     *generate_ast = $1;
   }

regexp :
   regexp OR regexp {
     $$ = new AST_OR($1,$3);
   }
  |regexp DOT regexp {
    $$= new AST_CONCAT($1,$3);
  }
  |regexp AND regexp {
    $$= new AST_AND($1,$3);
  }
  |LBALISE regexp RBALISE LCROCHET NUMBER RCROCHET {
    $$ = new AST_DELAY($2, Bound(-1*$5), Bound($5));
  }
  |LBALISE regexp RBALISE LCROCHET NUMBER COMMA NUMBER RCROCHET {
    $$ = new AST_DELAY($2, Bound(-1*$5), Bound($7));
  }
  |regexp PLUS {
    $$ = new AST_PLUS($1);
  }
  |regexp QUESTION {
    $$ = new AST_OPTIONAL($1);
   }
  |regexp STAR {
    $$ = new AST_KSTAR($1);
  }
  |LPARENTHESE regexp RPARENTHESE { $$=$2; }
  |regexp SHUFFLE regexp {
    $$= new AST_SHUFFLE($1,$3);
  }
  | FRESH LACCOLADE vars RACCOLADE regexp {
    vector<int> ids;
    for(string const& var : $3){
      try{
          ids.push_back(variables_id.at(var));
      }catch(out_of_range const& oor){
        cout << "Error during the detection of variables : " << var << "shall all be a variable.\n";
        exit(1);
      }
    }
    $$ = new AST_ALLOCS($5, ids);
  }
  | regexp LACCOLADE vars RACCOLADE FREE {
    vector<int> ids;
    for(string const& var : $3){
      try{
          ids.push_back(variables_id.at(var));
      }catch(out_of_range const& oor){
        cout << "Error during the detection of variables : " << var << "shall all be a variable.\n";
        exit(1);
      }
    }
    $$ = new AST_FREES($1, ids);
  }
  | terminals {$$ = $1;}

terminals: CONST {
    try{
      int id = variables_id.at($1);
      $$ = new AST_USE(id, false, false);
    }catch(out_of_range const& oor){
      $$ = new AST_CONST($1);
    }
  }
  |FRESH CONST {
    try{
      int id = variables_id.at($2);
      $$ = new AST_USE(id, true, false);
    }catch(out_of_range const& oor){
      cout << "Error during the detection of variables : " << $2 << "shall be a variable.\n";
      exit(1);
    }
  }
  |CONST FREE {
    try{
      int id = variables_id.at($1);
      $$ = new AST_USE(id, false, true);
    }catch(out_of_range const& oor){
      cout << "Error during the detection of variables : " << $1 << "shall be a variable.\n";
      exit(1);
    }
  }
  |FRESH CONST FREE {
    try{
      int id = variables_id.at($2);
      $$ = new AST_USE(id, true, true);
    }catch(out_of_range const& oor){
      cout << "Error during the detection of variables : " << $2 << "shall be a variable.\n";
      exit(1);
    }
  }
  | terminals LINK terminals {
    $$ = new AST_LINK($1, $3);
  }
  | ALPHA {
    $$ = new AST_ALPHA();
  }

vars : CONST {$$ = {$1};}
  | vars COMMA CONST { $1.insert($3); $$ = $1;}

%%
void
yy::parser::error (const yy::location& l,
                          const std::string& m)
{
  driver.error (l, m);
}
